# TODO: Setup prompt for git status

# Prompt
function collapse_pwd {
    echo $(pwd | sed -e "s,^$HOME,~,")
}

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '○'
}

function current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(git rev-parse --short HEAD 2> /dev/null) || return
    echo ${ref#refs/heads/}
}

getPrompt() (
    d="%{$FX[reset]$FG[025]%}"
    name="%{$FX[reset]$FG[133]%}%n"
    host="%{$FX[reset]$FG[136]%}%M"
    green="%{$FX[reset]$FG[070]%}"
    white="%{$FX[reset]$FG[012]%}"
    tstamp="%{$FG[037]%}%*"

    ZSH_GIT_PROMPT_PREFIX=" [%{$FX[reset]$FG[133]%}"
    ZSH_GIT_PROMPT_SUFFIX="%{$FX[reset]$FG[025]%}]"
    ZSH_GIT_PROMPT_DIRTY="%{$FX[reset]$FG[070]%}?"
    ZSH_GIT_PROMPT_UNTRACKED="%{$FX[reset]$FG[070]%}?"
    ZSH_GIT_PROMPT_CLEAN=""

    if [ $1 = l ]; then
        echo "\n${d}[${name}${d}@${host}${d}] [${green}"'$(collapse_pwd)'"${d}] "'$(git_prompt_info)'"\n${d}"'$(virtualenv_prompt_info)'" ${white}"'$(prompt_char) '
    elif [ $1 = r ]; then
        echo "${d}[${tstamp}${d}]${white}"
    fi
)

if [ $CURR_SHELL = zsh ]; then
    setopt prompt_subst
    PROMPT=$(getPrompt l)
    RPROMPT=$(getPrompt r)
else
    # TODO: Get an equivalent-ish prompt working for Bash
    # PS1=$(getPrompt)
    :
fi
