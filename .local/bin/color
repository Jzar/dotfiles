#!/usr/bin/env python3

from __future__ import print_function


class InvalidColorError(Exception):
    pass


class Color:
    BOLD = 1
    UNDERSCORE = 4
    REVERSE = 7

    BLACK = 0
    RED = 1
    GREEN = 2
    YELLOW = 3
    BLUE = 4
    MAGENTA = 5
    CYAN = 6
    WHITE = 7

    def __init__(self, *args, **kwargs):
        self.val = self.color(*args, **kwargs)

    def __str__(self):
        return self.val

    def __add__(self, other):
        return str(self) + other

    def __radd__(self, other):
        return other + str(self)

    # todo: Store fg, bg, attrs, and clear.  Store fg and bg as triplets that can be displayed via properties in any given format
    def color(self, fg=None, bg=None, attrs=(), clear=None):
        if isinstance(attrs, int):
            attrs = (attrs,)
        attrs = tuple(map(str, attrs))
        if fg is not None:
            fg = '3' + self.guess(fg)
        if bg is not None:
            bg = '4' + self.guess(bg)
        if clear is not None:
            clear = '0'

        return chr(27) + '[{}m'.format(';'.join(filter(None, (clear, fg, bg) + attrs)))

    def guess(self, mystery):
        """
        formats:
          0-7 => basic color
          8-255 => advanced color
          (r, g, b, base=5) => advanced color with given base (5, 15, 255)
          {!#}r[r]g[g]b[b] => advanced color
          &[0-23] => gray
        """
        if str(mystery).startswith('&'):
            return self.gray(int(mystery[1:]))
        if str(mystery).startswith(('#', '!')):
            return self.parse_rgb(mystery)
        try:
            clr = int(mystery)
        except TypeError:
            return self.convert(*mystery)
        else:
            if 0 <= clr <= 7:
                return str(clr)
            elif 8 <= clr <= 255:
                return self.format_color(clr)
        raise InvalidColorError(mystery)

    def gray(self, scale):
        return self.format_color(scale + 232)

    def format_color(self, index):
        return '8;5;{}'.format(index)

    def parse_rgb(self, rgb):
        base = 5 if rgb.startswith('!') else (15 if len(rgb) == 4 else 255)
        if base == 255:
            rgb = (None, rgb[1:3], rgb[3:5], rgb[5:7])
        r, g, b = map(lambda x: int(x, 16), rgb[1:])
        return self.convert(r, g, b, base)

    def convert(self, r, g, b, base=5):
        r = int(5. * r / base)
        g = int(5. * g / base)
        b = int(5. * b / base)
        return self.format_color(r * 36 + g * 6 + b + 16)


def print_codes():
    print(''.join('{} {:3} '.format(Color(0 if i > 0 else 7, i), i) for i in range(8)) + Color(clear=True))
    print(''.join('{} {:3} '.format(Color(0, i), i) for i in range(8, 16)) + Color(clear=True))
    print()
    for i in range(2):
        for j in range(6):
            print(''.join('{} {:3} '.format(Color(7 if k == 16 else 0, k), k) for k in range(108 * i + j * 6 + 16, 108 * i + j * 6 + 22)) + Color(clear=True),
                  ''.join('{} {:3} '.format(Color(0, k), k) for k in range(108 * i + j * 6 + 52, 108 * i + j * 6 + 58)) + Color(clear=True),
                  ''.join('{} {:3} '.format(Color(0, k), k) for k in range(108 * i + j * 6 + 88, 108 * i + j * 6 + 94)) + Color(clear=True), sep='  ')
        print()
    print(''.join('{} {:3} '.format(Color(7 if i < 244 else 0, i), i) for i in range(232, 256)) + Color(0, clear=True))


if __name__ == '__main__':
    # c = Color()
    # assert c.guess(6) == '6'
    # assert c.guess(128) == '8;5;128'
    # assert c.guess('196') == '8;5;196'
    # assert c.guess('&23') == '8;5;255'
    # assert c.guess((3, 3, 3)) == '8;5;145'
    # assert c.guess((4, 4, 4, 5)) == '8;5;188'
    # assert c.guess((6, 9, 12, 15)) == '8;5;110'
    # assert c.guess((0, 128, 255, 255)) == '8;5;33'
    # assert c.guess('!345') == '8;5;153'
    # assert c.guess('#fff') == '8;5;231'
    # assert c.guess('#000000') == '8;5;16'
    print_codes()
